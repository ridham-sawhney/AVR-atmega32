
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b76  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041d  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056a  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  7a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0); /* Command of first row and required position<16 */
	LCD_String(str); /* Call LCD string function */
}
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	98 bb       	out	0x18, r25	; 24
  94:	98 b3       	in	r25, 0x18	; 24
  96:	92 60       	ori	r25, 0x02	; 2
  98:	98 bb       	out	0x18, r25	; 24
  9a:	32 e0       	ldi	r19, 0x02	; 2
  9c:	3a 95       	dec	r19
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_Command+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_Command+0x20>
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	98 bb       	out	0x18, r25	; 24
  a8:	ef e8       	ldi	r30, 0x8F	; 143
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x30>
  b2:	00 00       	nop
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	92 2f       	mov	r25, r18
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	89 2b       	or	r24, r25
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	32 e0       	ldi	r19, 0x02	; 2
  ce:	3a 95       	dec	r19
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Command+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x52>
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	88 bb       	out	0x18, r24	; 24
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x62>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <LCD_Char>:
  e8:	98 b3       	in	r25, 0x18	; 24
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	28 2f       	mov	r18, r24
  ee:	20 7f       	andi	r18, 0xF0	; 240
  f0:	92 2b       	or	r25, r18
  f2:	98 bb       	out	0x18, r25	; 24
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	91 60       	ori	r25, 0x01	; 1
  f8:	98 bb       	out	0x18, r25	; 24
  fa:	98 b3       	in	r25, 0x18	; 24
  fc:	92 60       	ori	r25, 0x02	; 2
  fe:	98 bb       	out	0x18, r25	; 24
 100:	32 e0       	ldi	r19, 0x02	; 2
 102:	3a 95       	dec	r19
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Char+0x1a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Char+0x20>
 108:	98 b3       	in	r25, 0x18	; 24
 10a:	9d 7f       	andi	r25, 0xFD	; 253
 10c:	98 bb       	out	0x18, r25	; 24
 10e:	ef e8       	ldi	r30, 0x8F	; 143
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x30>
 118:	00 00       	nop
 11a:	28 b3       	in	r18, 0x18	; 24
 11c:	f0 e1       	ldi	r31, 0x10	; 16
 11e:	8f 9f       	mul	r24, r31
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	92 2f       	mov	r25, r18
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	89 2b       	or	r24, r25
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	88 bb       	out	0x18, r24	; 24
 132:	32 e0       	ldi	r19, 0x02	; 2
 134:	3a 95       	dec	r19
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Char+0x4c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Char+0x52>
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	88 bb       	out	0x18, r24	; 24
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x5c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Char+0x62>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <LCD_Init>:
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	87 bb       	out	0x17, r24	; 23
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	9c e9       	ldi	r25, 0x9C	; 156
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_Init+0x8>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_Init+0xe>
 15c:	00 00       	nop
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Init+0x32>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Init+0x38>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <LCD_String>:
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <LCD_String+0x16>
 19a:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	f8 01       	movw	r30, r16
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	81 11       	cpse	r24, r1
 1aa:	f7 cf       	rjmp	.-18     	; 0x19a <LCD_String+0x10>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01); /* Clear display */
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Clear+0xa>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Clear+0x10>
 1c6:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80); /* Cursor at home position */
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1ce:	08 95       	ret

000001d0 <main>:
}

int main()
{
	LCD_Init(); /* Initialization of LCD*/
 1d0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_Init>
	 DDRD = DDRD & (~(1<<2));		/* Make PD2 as input pin */
 1d4:	81 b3       	in	r24, 0x11	; 17
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	81 bb       	out	0x11, r24	; 17
	 int pinstatus;
	 
	 DDRC=0xff;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	84 bb       	out	0x14, r24	; 20
		pinstatus = PIND & (1<<2);
		
		
		
		
		if(pinstatus)
 1de:	82 9b       	sbis	0x10, 2	; 16
 1e0:	18 c0       	rjmp	.+48     	; 0x212 <main+0x42>
		{
			PORTC=0X00;
 1e2:	15 ba       	out	0x15, r1	; 21
			LCD_String("      Alert! ");
 1e4:	80 e6       	ldi	r24, 0x60	; 96
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
			LCD_Command(0xC0); /* Go to 2nd line*/
 1ec:	80 ec       	ldi	r24, 0xC0	; 192
 1ee:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_String(" GAS     LEAK");
 1f2:	8e e6       	ldi	r24, 0x6E	; 110
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	80 e7       	ldi	r24, 0x70	; 112
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x30>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x3a>
 20a:	00 00       	nop
			_delay_ms(100);
			LCD_Clear();
 20c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Clear>
 210:	e6 cf       	rjmp	.-52     	; 0x1de <main+0xe>
			//PORTC=0xFF;
		}
		
		else 
		{
			PORTC=0xFF;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	85 bb       	out	0x15, r24	; 21
			LCD_String("NO         GAS "); /* Write string on 1st line of LCD*/
 216:	8c e7       	ldi	r24, 0x7C	; 124
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
			LCD_Command(0xC0); /* Go to 2nd line*/
 21e:	80 ec       	ldi	r24, 0xC0	; 192
 220:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_String("    DETECT     ");
 224:	8c e8       	ldi	r24, 0x8C	; 140
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	80 e7       	ldi	r24, 0x70	; 112
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x62>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x6c>
 23c:	00 00       	nop
			_delay_ms(100);
			LCD_Clear();
 23e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Clear>
 242:	cd cf       	rjmp	.-102    	; 0x1de <main+0xe>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
